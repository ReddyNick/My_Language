This is the grammar of "the cooking programming language" with russian commands.
It is not complete but gives a picture of the structure of the language.

<programm> ::= "Рецепт, '"', <name of programm>, '"', [<premain>], <main>;

<premain> ::= [<assign> ';'], "Порядок приготовления:", [<func_defenition>+];

<main> ::= "ВРУБИТЬ МУЗОН!", {<statment>+},
           "ВЫРУБИТЬ МУЗОН!", "Время приготовления" <const> "мин";

<statement> ::= <if_stmt> | <while_stmt> | <expr>';' | <output> | <input>
                <return>  | <assign>;

<expr> ::= /*expression with operators +, -, =, etc.*/ ;

<assign> ::= "ингридиенты:", <id> ["=" <just expression>] {',' <id>["=" <just expression>]}, ";";

<if_stmt> ::= "дегустация", "(", <expr>, ")", (<statment> | "позвать повара" {<statment>} "отослать повара")
		      ["else",  (<statment> | "позвать повара "{<statment>} "отослать повара")];

<while> ::= "взбалтывать пока", "(", <expr>, ")", (<statment> | "позвать повара" {<statment>} "отослать повара");

<funct_call> ::= "из", <function_name>, "(", [<arguments>], ")";

<func_defenition> ::= "инструкция к", <function_name>'('<arguments>')',
		              "позвать повара",
				        <expression>+,
				      [<return>],
		              "отослать_повара";

<arguments> ::= <id> | <func_call>, {"," <id> | <func_call>};

<output> ::= "наСтол", <atom>, ';' ;
<input> ::= "затариться", <id>, ';' ;
<return> ::= "наТарелку <atom> ";

<atom> ::=["очистить от"], <id> | <const> | <function_call>
